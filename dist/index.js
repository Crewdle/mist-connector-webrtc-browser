!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var n=t();for(var o in n)("object"==typeof exports?exports:e)[o]=n[o]}}(this,(()=>(()=>{"use strict";var e={n:t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{WebRTCBrowserPeerConnectionConnector:()=>a});const n=require("webrtc-adapter");var o=e.n(n);const c=require("@crewdle/web-sdk");class a{connection;constructor(e){const t={iceServers:e.handshakeServers};this.connection=new RTCPeerConnection(t),o().disableLog(!1)}get canAddCandidates(){return null!==this.connection.remoteDescription}get canRestartHandshake(){return void 0!==this.connection.restartIce}get connectionState(){return this.connection.connectionState}get gatheringState(){return this.connection.iceGatheringState}get handshakeState(){return this.connection.iceConnectionState}get signalingState(){return this.connection.signalingState}set onCandidate(e){this.connection.onicecandidate=e}set onConnectionStateChange(e){this.connection.onconnectionstatechange=e}set onDataChannel(e){this.connection.ondatachannel=null!==e?t=>{e({channel:r(t.channel)})}:e}set onGatheringStateChange(e){this.connection.onicegatheringstatechange=e}set onHandshakeStateChange(e){this.connection.oniceconnectionstatechange=e}set onTrack(e){this.connection.ontrack=e}addCandidate(e){return this.connection.addIceCandidate(e)}addTrack(e,t){return this.connection.addTrack(e,t)}close(){this.connection.close()}async collectReceiversStats(e,t){for(const[n,o]of e){const e=[];for(const t of o){const n=await this.connection.getStats(t);n&&e.push(i(n))}0!==e.length&&t(e,n)}}async collectSendersStats(e,t){for(const[n,o]of e){const e=[];if(o.tracks.video?.track&&o.tracks.video?.sender){const t=await this.connection.getStats(o.tracks.video.track);t&&e.push(i(t))}if(o.tracks.audio?.track&&o.tracks.audio?.sender){const t=await this.connection.getStats(o.tracks.audio.track);t&&e.push(i(t))}0!==e.length&&t(e,n)}}async createAnswer(e){await this.connection.setRemoteDescription(e);const t=await this.connection.createAnswer();return await this.connection.setLocalDescription(t),t}createDataChannel(e){return r(this.connection.createDataChannel(e))}async createOffer(e){const t={};e?.handshakeRestart&&(t.iceRestart=!0);const n=await this.connection.createOffer(t);return await this.connection.setLocalDescription(n),n}async handleAnswer(e,t){await this.connection.setRemoteDescription(e),this.connection.onnegotiationneeded||(this.connection.onnegotiationneeded=t)}removeTrack(e){this.connection.removeTrack(e)}async replaceTrack(e,t){const n=t;await n.replaceTrack(e),this.connection.getTransceivers().forEach((e=>{e.sender===n&&(e.direction="sendrecv")}))}restartHandshake(){this.connection.restartIce()}setEncodingParameters(e,t,n,o,a){const r=e,i=r.getParameters();i&&(i.encodings.forEach((e=>{e.scaleResolutionDownBy=t,e.maxFramerate=n,e.maxBitrate=o,e.priority=function(e){switch(e){case c.MediaStreamPriority.Low:return"low";case c.MediaStreamPriority.High:return"high";default:return"medium"}}(a)})),r.setParameters(i).catch((()=>{})))}}function r(e){return{get bufferedAmount(){return e.bufferedAmount},get bufferedAmountLowThreshold(){return e.bufferedAmountLowThreshold},get state(){return e.readyState},set bufferedAmountLowThreshold(t){e.bufferedAmountLowThreshold=t},set onBufferedAmountLow(t){e.onbufferedamountlow=t},set onClose(t){e.onclose=t},set onMessage(t){e.onmessage=t},close(){e.close()},send(t){ArrayBuffer,e.send(t)}}}function i(e){const t=[];return e.forEach((e=>{t.push(e)})),t}return t})()));